一、为什么要用pytest
1、非常容易上手，入门简单，文档丰富
2、支持参数化
3、可以跳过某些测试用例
4、支持重复执行失败的case
5、支持运行由unittest编写的测试case
6、可生成html报告
7、方便的和持续集成工具jenkins集成
8、可支持执行部分用例
9、具有很多第三方插件，并且可以自定义扩展



二、pytest用例的设计原则
写用例的时候，一定要按照下面的规则去写，否则不符合规则的测试用例是不会执行的
·文件名以test_8*.py文件和*_test.py文件
·以test_开头的函数
·以Test开头的类，不能包含__init__方法
·以test_开头的类里面的方法
·所有的包pakeage必须要有__init__.py文件



三、有几种setup、teardown方法
10种




四、有哪些级别的setup、teardown方法
·模块级别：setup_module、teardown_module
·函数级别：setup_function、teardown_function，不在类中的方法
·类级别：setup_class、teardown_class
·类方法级别：setup_method、teardown_method
·类方法细化级别：setup、teardown




五、fixture是什么？
用来自定义测试用例的前置后置条件，不需要单独写setup、teardown方法



六、fixture装饰器的默认作用域是什么级别？
funtion方法级别



七、fixture装饰器scope有哪几种值？
作用范围由小到大：function、class、module、package、session



八、不同future可以互相调用码？
可以



九、测试用例如何调用fixture？有何区别？
三种方式
·fixture添加一个参数autouser=True，用例会自动调用
·fixture作为参数传入测试用例函数中
·使用装饰器@pytest.mark.userfixtures



十、一个测试用例调用了多个fixture，调用顺序是怎么样？
氛围越广的先调用，比如session级别的会先调用，然后再到function级别的被掉用



十一、如果要调用多个fixture，应该怎么做？装饰器嵌套的方式，可以实现吗？
·一个测试用例可以调用多个 fixture，可以添加多个 @pytest.mark.userfixtures，也可以在函数参数列表那声明多个 fixture 名字
·一个测试用例可以只调用一个 fixture，但这个 fixture 还会去调用其他更高层次的 fixture



十二、pytest实现fixture的原理是怎么样的？
·当某个方法添加了@pytest.fixture，会告知pytest这是一个fixture
·其他fixture或者测试用例可以调用它
·他会在测试用例执行前后去运行


十三、fixture如何实现teardown的效果
·在函数里面添加yield关键字
·或添加一个addfinalizer函数




十四、pytest测试用例执行完后有哪几种状态？
·passed：测试通过
·failed：测试失败
·error：代码问题
·xfail：预期测试失败，但不会被当作是失败状态



十五、如何跳过执行某些测试用例？
有两个装饰器
·@pytest.mark.skip
·@pytest.mark。skipif



十六、conftest.py文件是干嘛的？
·存放fixture的文件
·可以将一些全局通用的fixture放在里面，和测试用例解耦，比如：登录请求
·一个项目可以有多个conftest.py文件
·每个conftest.py只对当前package生效



十七、pytest怎么做参数化？
使用@pytest.mark.parametrize



十八、pytest.ini文件是干嘛的？
·pytest的主配置文件
·pytest每次运行前会读取该文件的内容，然后按指定的方式去运行
·最常用的有：注册mark标签、默认命令行选项、修改pytest收集用例





十九、你用过哪些pytest插件
·失败重跑插件：pytest-rerunfailures
·HTML报告插件：pytest-html
·重复执行用例：pytest-repeat
·多重断言插件：pytest-assume
·分布式测试插件：pytest-xdist
·结合allure报告插件：allure-pytest




二十、pytest-xdist是线程并发还是进程并发
进程并发




二十一、可以说下分布式测试的原理吗？
·xdist会产生一个或多个workers
·workers数量由参数-n决定，默认是cpu逻辑核数，每个CPU会启动一个进程跑测试用例集
·workers都通过master来控制
·每个worker复制执行完整的测试用例集，然后按照master的要求运行测试，而master机不执行测试任务




二十二、为什么会用allure作为测试报告？
·allure报告展示了非常详细的测试数据
·管理层肯定会更加喜欢美观的测试报告
·和Jenkins可以完美的结合一起使用
·可可以自定义测试报告一些内容




二十三、如何生成allure报告？
·下载allure的包
·解压，将bin目录添加到环境变量
·使用pytest命令执行时，添加 --alluredir参数值即可




二十四、如何清空allure历史报告？
使用pytest命令执行时，添加--clean-alluredir参数即可



二十五、如何动态生成测试用例的标题？
使用@pytest.mark.parametrize参数化，结合使用@allure.title装饰器，将标题值传入title装饰器中




二十六、有哪些常用的命令行参数
·-s：打印print的内容
·-q：简略打印
·-m：只运行指定mark标签的用例
·-k：运行指定关键字的测试用例
·-x：用例运行失败则立即停止执行
·--maxfail：用例运行时，允许最大失败次数。超过则停止运行
·--last-failed：只执行上次执行失败的测试用例



二十七、pytest有哪些断言方式？
·使用python的原生assert断言关键字
·使用pytest的断言库pytest-assume





































